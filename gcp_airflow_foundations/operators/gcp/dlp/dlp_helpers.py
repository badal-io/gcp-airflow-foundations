
import pandas as pd
def get_dlp_results_sql(project_id, dataset_id, table_id, min_count=0) -> str:
    """ Generate sql to query the DLP results table: https://cloud.google.com/dlp/docs/querying-findings
        and counts the number of finding in each field,info-type, likelihood grouping
    :param project_id:
    :param dataset_id:
    :param table_id:
    :return:a sql query that generates a result set with the following columns [field_name, info_type_name, likelihood, count_total]
    """

    return """SELECT 
        locations.record_location.field_id.name AS field_name, 
        info_type.name as info_type_name,
        likelihood as likelihood,
        COUNT(*) AS count_total
    FROM {}.{}.{},
        UNNEST(location.content_locations) AS locations
    GROUP BY
        locations.record_location.field_id.name,
        info_type.name,
        likelihood
    HAVING count_total > {}
    """.format(project_id, dataset_id, table_id, min_count)

def results_to_bq_policy_tags(fields, tag) -> list:
    """ Generates a tag to be applied for each column (if any)
    :param fields: A fields as generated by a query from get_dlp_results_sql
    :param tag: The tag to apply
    :return: A list of columns with am updated policyTags as per  https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#TableSchema
 """
    df = pd.DataFrame(fields, columns = ["field_name", "info_type_name", "likelihood", "count_total"])
    tags = []
    unique = df.drop_duplicates(subset = ["field_name"])
    for field in unique["field_name"]:
        tags.append({"name": field, "policyTags": {'names': [tag]}})
    return tags
